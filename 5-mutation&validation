-Which of the below combination is correct for Mutating and validating admission controllers ?
re: 

-Quel est le flux d'invocation des contr√¥leurs d'admission ?
re: first mutation then validation

-Create namespace webhook-demo where we will deploy webhook components
re:
& kubectl create ns webhook-demo

-Create TLS secret webhook-server-tls for secure webhook communication in webhook-demo namespace.
We have already created below cert and key for webhook server which should be used to create secret.
Certificate : /root/keys/webhook-server-tls.crt
Key : /root/keys/webhook-server-tls.key
https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets
re: Create tls secret type in kubernetes with --cert and --key options
$ kubectl -n webhook-demo create secret tls webhook-server-tls \
    --cert "/root/keys/webhook-server-tls.crt" \
    --key "/root/keys/webhook-server-tls.key"

-Create webhook deployment now.
We have already added sample deployment definition under /root/webhook-deployment.yaml so just create deployment with that definition.

 kubectl create -f /root/webhook-deployment.yaml

---
 apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-server
  namespace: webhook-demo
  labels:
    app: webhook-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook-server
  template:
    metadata:
      labels:
        app: webhook-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1234
      containers:
      - name: server
        image: stackrox/admission-controller-webhook-demo:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8443
          name: webhook-api
        volumeMounts:
        - name: webhook-tls-certs
          mountPath: /run/secrets/tls
          readOnly: true
      volumes:
      - name: webhook-tls-certs
        secret:
          secretName: webhook-server-tls


-Create webhook service now so that admission controller can communicate with webhook.
We have already added sample service definition under /root/webhook-service.yaml so just create service with that definition.
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-server
  namespace: webhook-demo
spec:
  selector:
    app: webhook-server
  ports:
    - port: 443
      targetPort: webhook-api
          
$ kubectl create -f /root/webhook-service.yaml


-We have added MutatingWebhookConfiguration under /root/webhook-configuration.yaml. If we apply this configuration which resource and actions it will affect?
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: demo-webhook
webhooks:
  - name: webhook-server.webhook-demo.svc
    clientConfig:
      service:
        name: webhook-server
        namespace: webhook-demo
        path: "/mutate"
     caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQekNDQWllZ0F3SUJBZ0lVUGw3M1I0Tm03TnpwOHlQSVFhUllYTjgxUjdVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0x6RXRNQ3NHQT
               FVRUF3d2tRV1J0YVhOemFXOXVJRU52Ym5SeWIyeHNaWElnVjJWaWFHOXZheUJFWlcxdgpJRU5CTUI0WERUSXlNVEF5TlRFMU1EWXdNMW9YRFRJeU1URXlOREUxTURZd00xb3dMekV0TUNzR
               0ExVUVBd3drClFXUnRhWE56YVc5dUlFTnZiblJ5YjJ4c1pYSWdWMlZpYUc5dmF5QkVaVzF2SUVOQk1JSUJJakFOQmdrcWhraUcKOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTlSTnQx
               SCtqVVBzeTBRZEVpZTk3akt2VzBXNCtFbS9TT01JUgo3Z05VOTVXMGZkTnUycTZOaHd2U2NoZENpREtFYjFFTWlROEw0dFZwL1k0R0lXeTc1WSs5bnpOOVFLOTlUbmZvCm9ZNldiUURrZFpI
               YVAvYllodHdJRVh1NUF1S3puMGxEUnNnM3h3b2tCSEd6YUdaWFNHL0ZUbUwwUy9hS3MwYzQKZDRrR3FrRjJUSkZkOXJLTkx5RkNkMXVDRk1rYmFYSGlsYTBHbXlCdVBxdWNqbDRRT0JvaFIwd
               FcvTUVUajZDUwpsSW04VEoveVh3Y0NiRHVRQzVCYkV5NU14MnVicXQ3bS9nQXRwUjlUakNCODZ5dGY2eHNia1pxbUJTWktDTGsrCjh4YjAwOU1ITWNodzgxUm5Oc1NlTUpGRmZkVDI2QWRHRkh
               ab1gzR2ZjQkpmRFozUi9RSURBUUFCbzFNd1VUQWQKQmdOVkhRNEVGZ1FVRXBTNFZ2b2FETnlvakpjMnM4c1BHR29wSVdNd0h3WURWUjBqQkJnd0ZvQVVFcFM0VnZvYQpETnlvakpjMnM4c1BHR
               29wSVdNd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DCkFRRUFZUzVnNmlKRjdIL1BtUDd3S2d3SDJtV3pnZXAxeHJWZldVTUw0cUtoZ3NqbkV6Z3RHcmdSbVN4
               dDZNOE0KalZmM0J0SEMza0dnRnZmSG5vMW5pa3pZbnh3VUwrMExhMDZPR1paSk5MR3R0Wm01UVBqR0toaW9iWHFqMWNsUwpPbDFDYVgvaDB3ZDFHcFR5dmFvYzQrVG1nQkQ3Ym1DdENzSDlFSWtO
               ZjY3YUxHUnNGZ0huSjJsZW45bnVwRnFqCitDYUc0VmVBTlJuNndRQ1d1c1l5bmJPcytITGpYQ0ZuSXNkQUlSNVFOTDVyK3NQSlVZWmJQSXRmRy9yeUlLWEYKb3pPbnl5Qmd5S2duTXBCRHdOd2M4L
               3haRWgvdXU3NGtJR3dsNHdGMDdnZ0ZCMVdrRmFDZzdFeEdDU1VUYkJVNgprd1YrSWFQWllnQk4zMVlVSHV5YWxkRUFJdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    rules:
      - operations: [ "CREATE" ]
         - operations: [ "CREATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    admissionReviewVersions: ["v1beta1"]
    sideEffects: None
    
    re: pods will create 
    
    
 -Now lets deploy MutatingWebhookConfiguration in /root/webhook-configuration.yaml
    re:  kubectl create -f /root/webhook-configuration.yaml
    
-In previous steps we have deployed demo webhook which does below
Denies all request for pod to run as root in container if no securityContext is provided.
If no value is set for runAsNonRoot, a default of true is applied, and the user ID defaults to 1234
Allow to run containers as root if runAsNonRoot set explicitly to false in the securityContext
In next steps we have added some pod definitions file for each scenario. Deploy those pods with existing definitions file and validate the behaviour of our webhook

-Deploy a pod with no securityContext specified.
We have added pod definition file under 
re: kubectl apply -f /root/pod-with-defaults.yaml
---
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-defaults
  labels:
    app: pod-with-defaults
spec:
  restartPolicy: OnFailure
  containers:
    - name: busybox
      image: busybox
      command: ["sh", "-c", "echo I am running as user $(id -u)"]
      
-What are runAsNonRoot and runAsUser values for previously created pods securityContext?
We did not specify any securityContext values in pod definition so check out the changes done by mutation webhook in pod
re : $ kubectl get po pod-with-defaults -o yaml | grep -A2 " securityContext:"

-Deploy pod with a securityContext explicitly allowing it to run as root
We have added pod definition file under /root/pod-with-override.yaml
Validate securityContext after you deploy this pod

---
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-override
  labels:
    app: pod-with-override
spec:
  restartPolicy: OnFailure
  securityContext:
    runAsNonRoot: false
  containers:
    - name: busybox
      image: busybox
      command: ["sh", "-c", "echo I am running as user $(id -u)"]

re: Run below command
$ kubectl apply -f /root/pod-with-override.yaml
then Validate securityContext with
$ kubectl get po pod-with-override -o yaml | grep -A2 " securityContext:"

-Deploy a pod with a conflicting securityContext i.e. pod running with a user id of 0 (root)
We have added pod definition file under /root/pod-with-conflict.yaml
Mutating webhook should reject the request as its asking to run as root user without setting runAsNonRoot: false

---apiVersion: v1
kind: Pod
metadata:
  name: pod-with-conflict
  labels:
    app: pod-with-conflict
spec:
  restartPolicy: OnFailure
  securityContext:
    runAsNonRoot: true
    runAsUser: 0
  containers:
    - name: busybox
      image: busybox
      command: ["sh", "-c", "echo I am running as user $(id -u)"]
      
re: $ kubectl apply -f /root/pod-with-conflict.yaml
output: Error from server: error when creating "pod-with-conflict.yaml": admission webhook "webhook-server.webhook-demo.svc" denied the request: 
runAsNonRoot specified, but runAsUser set to 0 (the root user)
